#!/bin/bash
# Author: Moch Nurhalimi Zaini D <moch.nurhalimi@gmail.com>
# Author: Irfan Andriansyah <irfan@99.co>

echo "Checking syntax..."

ROOT_DIR="$(pwd)/"
LIST=$(git diff-index --cached --name-only --diff-filter=ACMR HEAD)
ERRORS_BUFFER=""

TMP_STAGING=".tmp_staging"

# Python Linter pre-commit hook for git

echo "Linter Code..."

PYTHON_BIN=$ROOT_DIR/venv/bin/python
PYLINT_IGNORE="--ignore=venv"
PYLINT_BIN="$PYTHON_BIN -m pylint $PYLINT_IGNORE"

FILE_PATTERN="\.(py)$"

# simple check if code sniffer is set up correctly
if [ ! -x $PYTHON_BIN ]; then
    echo "Python not found -> $PYTHON_BIN"
    exit 1
fi

# stolen from template file
if git rev-parse --verify HEAD
then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# this is the magic:
# retrieve all files in staging area that are added, modified or renamed
# but no deletions etc
FILES=$(git diff-index --name-only --cached --diff-filter=ACMR $against -- )

if [ "$FILES" == "" ]; then
    exit 0
fi

# create temporary copy of staging area
if [ -e $TMP_STAGING ]; then
    rm -rf $TMP_STAGING
fi
mkdir $TMP_STAGING

# match files against whitelist
FILES_TO_CHECK=""
for FILE in $FILES
do
    echo "$FILE" | egrep -q "$FILE_PATTERN"
    RETVAL=$?
    if [ "$RETVAL" -eq "0" ]
    then
        FILES_TO_CHECK="$FILES_TO_CHECK $FILE"
    fi
done

if [ "$FILES_TO_CHECK" == "" ]; then
    exit 0
fi


PYTHON_STAGED_FILES=""
for FILE in $FILES_TO_CHECK
do
  ID=$(git diff-index --cached $against $FILE | cut -d " " -f4)

  # create staged version of file in temporary staging area with the same
  # path as the original file so that the phpcs ignore filters can be applied
  mkdir -p "$TMP_STAGING/$(dirname $FILE)"
  git cat-file blob $ID > "$TMP_STAGING/$FILE"

  echo "$FILE" | egrep -q "\.(py)$"
  RETVAL=$?
  if [ "$RETVAL" -eq "0" ]
  then
      PYTHON_STAGED_FILES="$PYTHON_STAGED_FILES $TMP_STAGING/$FILE"
  fi
done

PYLINT_RETVAL=0
if [ "$PYTHON_STAGED_FILES" != "" ]; then
    $PYLINT_BIN $PYTHON_STAGED_FILES
    PYLINT_RETVAL=$?
fi

# delete temporary copy of staging area
rm -rf $TMP_STAGING

RETVAL=$(($PYLINT_RETVAL))
exit $RETVAL